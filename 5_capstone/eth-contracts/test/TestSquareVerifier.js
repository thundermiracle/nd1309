// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require("SquareVerifier");
const proof = require("../../zokrates/code/square/proof.json");

contract("TestSquareVerifier", (accounts) => {
  const contractOwner = accounts[1];
  let contract;

  beforeEach(async function () {
    contract = await SquareVerifier.new({ from: contractOwner });
  });

  // Test verification with correct proof
  // - use the contents from proof.json generated from zokrates steps
  it("Test verification with correct proof", async () => {
    const isVerified = await contract.verifyTx.call(
      proof.proof.a,
      proof.proof.b,
      proof.proof.c,
      proof.inputs
    );

    assert.equal(isVerified, true, "return true is proof is real");
  });

  // Test verification with incorrect proof
  it("Test verification with incorrect proof", async () => {
    const incorrectInputs = proof.inputs.map((input) => input.substr(0, input.length - 1) + "2");

    const isVerified = await contract.verifyTx.call(
      proof.proof.a,
      proof.proof.b,
      proof.proof.c,
      incorrectInputs
    );

    assert.equal(isVerified, false, "return false is proof is not real");
  });
});
