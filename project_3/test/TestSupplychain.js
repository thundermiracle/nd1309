// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
const SupplyChain = artifacts.require("SupplyChain");

contract("SupplyChain", function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  const sku = 1;
  const upc = 1;
  const ownerID = accounts[0];
  const originFarmerID = accounts[1];
  const originFarmName = "John Doe";
  const originFarmInformation = "Yarray Valley";
  const originFarmLatitude = "-38.239770";
  const originFarmLongitude = "144.341490";
  const productID = sku + upc;
  const productNotes = "Best beans for Espresso";
  const productPrice = web3.utils.toWei("1", "ether");
  const itemState = 0;
  const distributorID = accounts[2];
  const retailerID = accounts[3];
  const consumerID = accounts[4];
  const emptyAddress = "0x00000000000000000000000000000000000000";

  let supplyChain;
  beforeEach("initial contract", async () => {
    supplyChain = await SupplyChain.deployed();
  });

  ///Available Accounts
  ///==================
  ///(0) 0x51d6849a385f1950e6d871581ce28108dc4b81e4
  ///(1) 0xc1e07e06bdde797757ae50798f29cb2bf269bd58
  ///(2) 0xeb38a2be9d2a93491879a55deea4f5bf4569fe9d
  ///(3) 0xa831e47341f21dfde76d8da2d4b87875b5a78c3f
  ///(4) 0xe8745eed769efac19508bdf0650c421601a48eed
  ///(5) 0xed6f9ed8cba5aa3f5470240755eb3391f85f72db
  ///(6) 0x4e7e41c1548212352fd29e9e66de1370ee80a451
  ///(7) 0xa3f1009cc457feb4c96667318ef1422c3e8cf86e
  ///(8) 0x4caba807fb6e8f0fad5154cbe1ed6dded0f18c22
  ///(9) 0x794ce355a7d862a6a07e728b42e347fa7c788bcd

  console.log("ganache-cli accounts used here...");
  console.log("Contract Owner: accounts[0] ", accounts[0]);
  console.log("Farmer: accounts[1] ", accounts[1]);
  console.log("Distributor: accounts[2] ", accounts[2]);
  console.log("Retailer: accounts[3] ", accounts[3]);
  console.log("Consumer: accounts[4] ", accounts[4]);

  // 1st Test
  it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Harvested()
    await supplyChain.Harvested(null, (error, event) => {
      eventEmitted = true;
    });

    // Mark an item as Harvested by calling function harvestItem()
    await supplyChain.harvestItem(
      upc,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      productNotes
    );

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(
      resultBufferOne[2],
      originFarmerID,
      "Error: Missing or Invalid ownerID"
    );
    assert.equal(
      resultBufferOne[3],
      originFarmerID,
      "Error: Missing or Invalid originFarmerID"
    );
    assert.equal(
      resultBufferOne[4],
      originFarmName,
      "Error: Missing or Invalid originFarmName"
    );
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      "Error: Missing or Invalid originFarmInformation"
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      "Error: Missing or Invalid originFarmLatitude"
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      "Error: Missing or Invalid originFarmLongitude"
    );
    assert.equal(resultBufferTwo[5], 0, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 2nd Test
  it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
    // Declare and Initialize a variable for event
    // Watch the emitted event Processed()
    // Mark an item as Processed by calling function processtItem()
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    // Verify the result set
  });

  // 3rd Test
  it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
    // Declare and Initialize a variable for event
    // Watch the emitted event Packed()
    // Mark an item as Packed by calling function packItem()
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    // Verify the result set
  });

  // 4th Test
  it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
    // Declare and Initialize a variable for event
    // Watch the emitted event ForSale()
    // Mark an item as ForSale by calling function sellItem()
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    // Verify the result set
  });

  // 5th Test
  it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
    // Declare and Initialize a variable for event

    // Watch the emitted event Sold()
    var event = supplyChain.Sold();

    // Mark an item as Sold by calling function buyItem()

    // Retrieve the just now saved item from blockchain by calling function fetchItem()

    // Verify the result set
  });

  // 6th Test
  it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
    // Declare and Initialize a variable for event
    // Watch the emitted event Shipped()
    // Mark an item as Sold by calling function buyItem()
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    // Verify the result set
  });

  // 7th Test
  it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
    // Declare and Initialize a variable for event
    // Watch the emitted event Received()
    // Mark an item as Sold by calling function buyItem()
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    // Verify the result set
  });

  // 8th Test
  it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
    // Declare and Initialize a variable for event
    // Watch the emitted event Purchased()
    // Mark an item as Sold by calling function buyItem()
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    // Verify the result set
  });

  // 9th Test
  it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    // Verify the result set:
  });

  // 10th Test
  it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    // Verify the result set:
  });
});
